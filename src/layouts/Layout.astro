---
// src/layouts/Layout.astro
export interface Props {
	title: string;
}

const { title } = Astro.props;
import { Toaster } from "@/components/ui/sonner"
import '../styles/global.css'
---

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
 
	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>

<!doctype html>
<html lang="es" class="dark">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="PWA para gestiÃ³n de inventario" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="manifest" href="/manifest.json" />
		<meta name="theme-color" content="#3b82f6" />
		<title>{title}</title>
	</head>
	<body>
		<slot />
		<Toaster richColors client:load />
		
		<script>
			if ("serviceWorker" in navigator) {
				window.addEventListener("load", () => {
					navigator.serviceWorker
						.register("/sw.js")
						.then((registration) => console.log("SW registered: ", registration))
						.catch((registrationError) => console.log("SW registration failed: ", registrationError));
				});
			}

			let deferredPrompt;
			window.addEventListener("beforeinstallprompt", (e) => {
				deferredPrompt = e;
			});
		</script>
	</body>
</html>